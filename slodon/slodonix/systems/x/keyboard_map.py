__all__ = ["full_map"]
import Xlib # type: ignore
from Xlib import display

_display = display.Display()

keyboard_mapping = {
    "backspace": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("BackSpace")),
    "\b": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("BackSpace")),
    "tab": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Tab")),
    "enter": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Return")),
    "return": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Return")),
    "shift": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Shift_L")),
    "ctrl": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Control_L")),
    "alt": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Alt_L")),
    "pause": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Pause")),
    "capslock": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Caps_Lock")),
    "esc": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Escape")),
    "escape": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Escape")),
    "pgup": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Page_Up")),
    "pgdn": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Page_Down")),
    "pageup": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Page_Up")),
    "pagedown": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Page_Down")),
    "end": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("End")),
    "home": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Home")),
    "left": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Left")),
    "up": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Up")),
    "right": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Right")),
    "down": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Down")),
    "select": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Select")),
    "print": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Print")),
    "execute": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Execute")),
    "prtsc": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Print")),
    "prtscr": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Print")),
    "prntscrn": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Print")),
    "printscreen": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Print")),
    "insert": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Insert")),
    "del": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Delete")),
    "delete": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Delete")),
    "help": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Help")),
    "win": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Super_L")),
    "winleft": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Super_L")),
    "winright": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Super_R")),
    "apps": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Menu")),
    "num0": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("KP_0")),
    "num1": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("KP_1")),
    "num2": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("KP_2")),
    "num3": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("KP_3")),
    "num4": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("KP_4")),
    "num5": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("KP_5")),
    "num6": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("KP_6")),
    "num7": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("KP_7")),
    "num8": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("KP_8")),
    "num9": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("KP_9")),
    "multiply": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("KP_Multiply")),
    "add": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("KP_Add")),
    "separator": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("KP_Separator")),
    "subtract": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("KP_Subtract")),
    "decimal": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("KP_Decimal")),
    "divide": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("KP_Divide")),
    "f1": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("F1")),
    "f2": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("F2")),
    "f3": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("F3")),
    "f4": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("F4")),
    "f5": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("F5")),
    "f6": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("F6")),
    "f7": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("F7")),
    "f8": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("F8")),
    "f9": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("F9")),
    "f10": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("F10")),
    "f11": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("F11")),
    "f12": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("F12")),
    "f13": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("F13")),
    "f14": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("F14")),
    "f15": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("F15")),
    "f16": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("F16")),
    "f17": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("F17")),
    "f18": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("F18")),
    "f19": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("F19")),
    "f20": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("F20")),
    "f21": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("F21")),
    "f22": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("F22")),
    "f23": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("F23")),
    "f24": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("F24")),
    "numlock": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Num_Lock")),
    "scrolllock": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Scroll_Lock")),
    "shiftleft": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Shift_L")),
    "shiftright": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Shift_R")),
    "ctrlleft": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Control_L")),
    "ctrlright": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Control_R")),
    "altleft": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Alt_L")),
    "altright": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Alt_R")),
    # These are added because unlike a-zA-Z0-9, the single characters do not have a
    " ": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("space")),
    "space": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("space")),
    "\t": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Tab")),
    "\n": _display.keysym_to_keycode(
        Xlib.XK.string_to_keysym("Return")
    ),  # for some reason this needs to be cr, not lf
    "\r": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Return")),
    "\e": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("Escape")),
    "!": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("exclam")),
    "#": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("numbersign")),
    "%": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("percent")),
    "$": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("dollar")),
    "&": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("ampersand")),
    '"': _display.keysym_to_keycode(Xlib.XK.string_to_keysym("quotedbl")),
    "'": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("apostrophe")),
    "(": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("parenleft")),
    ")": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("parenright")),
    "*": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("asterisk")),
    "=": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("equal")),
    "+": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("plus")),
    ",": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("comma")),
    "-": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("minus")),
    ".": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("period")),
    "/": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("slash")),
    ":": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("colon")),
    ";": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("semicolon")),
    "<": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("less")),
    ">": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("greater")),
    "?": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("question")),
    "@": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("at")),
    "[": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("bracketleft")),
    "]": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("bracketright")),
    "\\": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("backslash")),
    "^": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("asciicircum")),
    "_": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("underscore")),
    "`": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("grave")),
    "{": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("braceleft")),
    "|": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("bar")),
    "}": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("braceright")),
    "~": _display.keysym_to_keycode(Xlib.XK.string_to_keysym("asciitilde")),
}

KEY_NAMES: list[str] = [
    "\t",
    "\n",
    "\r",
    " ",
    "!",
    '"',
    "#",
    "$",
    "%",
    "&",
    "'",
    "(",
    ")",
    "*",
    "+",
    ",",
    "-",
    ".",
    "/",
    "0",
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9",
    ":",
    ";",
    "<",
    "=",
    ">",
    "?",
    "@",
    "[",
    "\\",
    "]",
    "^",
    "_",
    "`",
    "a",
    "b",
    "c",
    "d",
    "e",
    "f",
    "g",
    "h",
    "i",
    "j",
    "k",
    "l",
    "m",
    "n",
    "o",
    "p",
    "q",
    "r",
    "s",
    "t",
    "u",
    "v",
    "w",
    "x",
    "y",
    "z",
    "{",
    "|",
    "}",
    "~",
    "accept",
    "add",
    "alt",
    "altleft",
    "altright",
    "apps",
    "backspace",
    "browserback",
    "browserfavorites",
    "browserforward",
    "browserhome",
    "browserrefresh",
    "browsersearch",
    "browserstop",
    "capslock",
    "clear",
    "convert",
    "ctrl",
    "ctrlleft",
    "ctrlright",
    "decimal",
    "del",
    "delete",
    "divide",
    "down",
    "end",
    "enter",
    "esc",
    "escape",
    "execute",
    "f1",
    "f10",
    "f11",
    "f12",
    "f13",
    "f14",
    "f15",
    "f16",
    "f17",
    "f18",
    "f19",
    "f2",
    "f20",
    "f21",
    "f22",
    "f23",
    "f24",
    "f3",
    "f4",
    "f5",
    "f6",
    "f7",
    "f8",
    "f9",
    "final",
    "fn",
    "hanguel",
    "hangul",
    "hanja",
    "help",
    "home",
    "insert",
    "junja",
    "kana",
    "kanji",
    "launchapp1",
    "launchapp2",
    "launchmail",
    "launchmediaselect",
    "left",
    "modechange",
    "multiply",
    "nexttrack",
    "nonconvert",
    "num0",
    "num1",
    "num2",
    "num3",
    "num4",
    "num5",
    "num6",
    "num7",
    "num8",
    "num9",
    "numlock",
    "pagedown",
    "pageup",
    "pause",
    "pgdn",
    "pgup",
    "playpause",
    "prevtrack",
    "print",
    "printscreen",
    "prntscrn",
    "prtsc",
    "prtscr",
    "return",
    "right",
    "scrolllock",
    "select",
    "separator",
    "shift",
    "shiftleft",
    "shiftright",
    "sleep",
    "space",
    "stop",
    "subtract",
    "tab",
    "up",
    "volumedown",
    "volumemute",
    "volumeup",
    "win",
    "winleft",
]


class KeyBoardMap(dict):
    def __setitem__(self, key, item):
        self.__dict__[key] = item

    def __getitem__(self, key):
        return self.__dict__[key]

    def __repr__(self):
        return repr(self.__dict__)

    def __len__(self):
        return len(self.__dict__)

    def __delitem__(self, key):
        del self.__dict__[key]

    def clear(self):
        return self.__dict__.clear()

    def copy(self):
        return self.__dict__.copy()

    def has_key(self, k):
        return k in self.__dict__

    def update(self, *args, **kwargs):
        return self.__dict__.update(*args, **kwargs)

    def keys(self):
        return self.__dict__.keys()

    def values(self):
        return self.__dict__.values()


def fetch(data: list = []):
    _map = KeyBoardMap()
    _data_to_map = keyboard_mapping or data
    for item in _data_to_map:
        _map.update({item[0]: item[1]})
    return _map


key_map = fetch()
full_map = fetch(data=KEY_NAMES)

# https://github.com/asweigart/pyautogui/blob/master/pyautogui/_pyautogui_x11.py#L319
for c in """abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890""":
    full_map[c] = _display.keysym_to_keycode(Xlib.XK.string_to_keysym(c))
